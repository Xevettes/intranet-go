// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/virtualization/virtualization.proto

package virtualization

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VirtualizationService_ListClusters_FullMethodName         = "/virtualization_proto.VirtualizationService/ListClusters"
	VirtualizationService_GetCluster_FullMethodName           = "/virtualization_proto.VirtualizationService/GetCluster"
	VirtualizationService_CreateCluster_FullMethodName        = "/virtualization_proto.VirtualizationService/CreateCluster"
	VirtualizationService_UpdateCluster_FullMethodName        = "/virtualization_proto.VirtualizationService/UpdateCluster"
	VirtualizationService_DeleteCluster_FullMethodName        = "/virtualization_proto.VirtualizationService/DeleteCluster"
	VirtualizationService_ListVirtualMachines_FullMethodName  = "/virtualization_proto.VirtualizationService/ListVirtualMachines"
	VirtualizationService_GetVirtualMachine_FullMethodName    = "/virtualization_proto.VirtualizationService/GetVirtualMachine"
	VirtualizationService_CreateVirtualMachine_FullMethodName = "/virtualization_proto.VirtualizationService/CreateVirtualMachine"
	VirtualizationService_UpdateVirtualMachine_FullMethodName = "/virtualization_proto.VirtualizationService/UpdateVirtualMachine"
	VirtualizationService_DeleteVirtualMachine_FullMethodName = "/virtualization_proto.VirtualizationService/DeleteVirtualMachine"
)

// VirtualizationServiceClient is the client API for VirtualizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualizationServiceClient interface {
	ListClusters(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	GetCluster(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Cluster, error)
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	UpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error)
	DeleteCluster(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListVirtualMachines(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListVMsResponse, error)
	GetVirtualMachine(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	CreateVirtualMachine(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VirtualMachine, error)
	UpdateVirtualMachine(ctx context.Context, in *VirtualMachine, opts ...grpc.CallOption) (*VirtualMachine, error)
	DeleteVirtualMachine(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type virtualizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualizationServiceClient(cc grpc.ClientConnInterface) VirtualizationServiceClient {
	return &virtualizationServiceClient{cc}
}

func (c *virtualizationServiceClient) ListClusters(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) GetCluster(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, VirtualizationService_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, VirtualizationService_CreateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) UpdateCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, VirtualizationService_UpdateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) DeleteCluster(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_DeleteCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) ListVirtualMachines(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMsResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_ListVirtualMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) GetVirtualMachine(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, VirtualizationService_GetVirtualMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) CreateVirtualMachine(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VirtualMachine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, VirtualizationService_CreateVirtualMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) UpdateVirtualMachine(ctx context.Context, in *VirtualMachine, opts ...grpc.CallOption) (*VirtualMachine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualMachine)
	err := c.cc.Invoke(ctx, VirtualizationService_UpdateVirtualMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualizationServiceClient) DeleteVirtualMachine(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, VirtualizationService_DeleteVirtualMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualizationServiceServer is the server API for VirtualizationService service.
// All implementations must embed UnimplementedVirtualizationServiceServer
// for forward compatibility.
type VirtualizationServiceServer interface {
	ListClusters(context.Context, *ListRequest) (*ListClustersResponse, error)
	GetCluster(context.Context, *GetRequest) (*Cluster, error)
	CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error)
	UpdateCluster(context.Context, *Cluster) (*Cluster, error)
	DeleteCluster(context.Context, *GetRequest) (*DeleteResponse, error)
	ListVirtualMachines(context.Context, *ListRequest) (*ListVMsResponse, error)
	GetVirtualMachine(context.Context, *GetRequest) (*VirtualMachine, error)
	CreateVirtualMachine(context.Context, *CreateVMRequest) (*VirtualMachine, error)
	UpdateVirtualMachine(context.Context, *VirtualMachine) (*VirtualMachine, error)
	DeleteVirtualMachine(context.Context, *GetRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedVirtualizationServiceServer()
}

// UnimplementedVirtualizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVirtualizationServiceServer struct{}

func (UnimplementedVirtualizationServiceServer) ListClusters(context.Context, *ListRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedVirtualizationServiceServer) GetCluster(context.Context, *GetRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedVirtualizationServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedVirtualizationServiceServer) UpdateCluster(context.Context, *Cluster) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedVirtualizationServiceServer) DeleteCluster(context.Context, *GetRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedVirtualizationServiceServer) ListVirtualMachines(context.Context, *ListRequest) (*ListVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachines not implemented")
}
func (UnimplementedVirtualizationServiceServer) GetVirtualMachine(context.Context, *GetRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualMachine not implemented")
}
func (UnimplementedVirtualizationServiceServer) CreateVirtualMachine(context.Context, *CreateVMRequest) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualMachine not implemented")
}
func (UnimplementedVirtualizationServiceServer) UpdateVirtualMachine(context.Context, *VirtualMachine) (*VirtualMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualMachine not implemented")
}
func (UnimplementedVirtualizationServiceServer) DeleteVirtualMachine(context.Context, *GetRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualMachine not implemented")
}
func (UnimplementedVirtualizationServiceServer) mustEmbedUnimplementedVirtualizationServiceServer() {}
func (UnimplementedVirtualizationServiceServer) testEmbeddedByValue()                               {}

// UnsafeVirtualizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualizationServiceServer will
// result in compilation errors.
type UnsafeVirtualizationServiceServer interface {
	mustEmbedUnimplementedVirtualizationServiceServer()
}

func RegisterVirtualizationServiceServer(s grpc.ServiceRegistrar, srv VirtualizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedVirtualizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VirtualizationService_ServiceDesc, srv)
}

func _VirtualizationService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).ListClusters(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).GetCluster(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).UpdateCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).DeleteCluster(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_ListVirtualMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).ListVirtualMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_ListVirtualMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).ListVirtualMachines(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_GetVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).GetVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_GetVirtualMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).GetVirtualMachine(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_CreateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).CreateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_CreateVirtualMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).CreateVirtualMachine(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_UpdateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).UpdateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_UpdateVirtualMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).UpdateVirtualMachine(ctx, req.(*VirtualMachine))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualizationService_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualizationServiceServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualizationService_DeleteVirtualMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualizationServiceServer).DeleteVirtualMachine(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualizationService_ServiceDesc is the grpc.ServiceDesc for VirtualizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "virtualization_proto.VirtualizationService",
	HandlerType: (*VirtualizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _VirtualizationService_ListClusters_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _VirtualizationService_GetCluster_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _VirtualizationService_CreateCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _VirtualizationService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _VirtualizationService_DeleteCluster_Handler,
		},
		{
			MethodName: "ListVirtualMachines",
			Handler:    _VirtualizationService_ListVirtualMachines_Handler,
		},
		{
			MethodName: "GetVirtualMachine",
			Handler:    _VirtualizationService_GetVirtualMachine_Handler,
		},
		{
			MethodName: "CreateVirtualMachine",
			Handler:    _VirtualizationService_CreateVirtualMachine_Handler,
		},
		{
			MethodName: "UpdateVirtualMachine",
			Handler:    _VirtualizationService_UpdateVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _VirtualizationService_DeleteVirtualMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/virtualization/virtualization.proto",
}
