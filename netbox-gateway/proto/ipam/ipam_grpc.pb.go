// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/ipam/ipam.proto

package ipam

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IpamService_ListPrefixes_FullMethodName    = "/ipam_proto.IpamService/ListPrefixes"
	IpamService_GetPrefix_FullMethodName       = "/ipam_proto.IpamService/GetPrefix"
	IpamService_CreatePrefix_FullMethodName    = "/ipam_proto.IpamService/CreatePrefix"
	IpamService_UpdatePrefix_FullMethodName    = "/ipam_proto.IpamService/UpdatePrefix"
	IpamService_DeletePrefix_FullMethodName    = "/ipam_proto.IpamService/DeletePrefix"
	IpamService_ListIPAddresses_FullMethodName = "/ipam_proto.IpamService/ListIPAddresses"
	IpamService_GetIPAddress_FullMethodName    = "/ipam_proto.IpamService/GetIPAddress"
	IpamService_CreateIPAddress_FullMethodName = "/ipam_proto.IpamService/CreateIPAddress"
	IpamService_UpdateIPAddress_FullMethodName = "/ipam_proto.IpamService/UpdateIPAddress"
	IpamService_DeleteIPAddress_FullMethodName = "/ipam_proto.IpamService/DeleteIPAddress"
	IpamService_ListVLANs_FullMethodName       = "/ipam_proto.IpamService/ListVLANs"
	IpamService_GetVLAN_FullMethodName         = "/ipam_proto.IpamService/GetVLAN"
	IpamService_CreateVLAN_FullMethodName      = "/ipam_proto.IpamService/CreateVLAN"
	IpamService_UpdateVLAN_FullMethodName      = "/ipam_proto.IpamService/UpdateVLAN"
	IpamService_DeleteVLAN_FullMethodName      = "/ipam_proto.IpamService/DeleteVLAN"
)

// IpamServiceClient is the client API for IpamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpamServiceClient interface {
	ListPrefixes(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListPrefixesResponse, error)
	GetPrefix(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Prefix, error)
	CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*Prefix, error)
	UpdatePrefix(ctx context.Context, in *Prefix, opts ...grpc.CallOption) (*Prefix, error)
	DeletePrefix(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListIPAddresses(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListIPAddressesResponse, error)
	GetIPAddress(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*IPAddress, error)
	CreateIPAddress(ctx context.Context, in *CreateIPAddressRequest, opts ...grpc.CallOption) (*IPAddress, error)
	UpdateIPAddress(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*IPAddress, error)
	DeleteIPAddress(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListVLANs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListVLANsResponse, error)
	GetVLAN(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*VLAN, error)
	CreateVLAN(ctx context.Context, in *CreateVLANRequest, opts ...grpc.CallOption) (*VLAN, error)
	UpdateVLAN(ctx context.Context, in *VLAN, opts ...grpc.CallOption) (*VLAN, error)
	DeleteVLAN(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type ipamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpamServiceClient(cc grpc.ClientConnInterface) IpamServiceClient {
	return &ipamServiceClient{cc}
}

func (c *ipamServiceClient) ListPrefixes(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListPrefixesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrefixesResponse)
	err := c.cc.Invoke(ctx, IpamService_ListPrefixes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) GetPrefix(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Prefix, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prefix)
	err := c.cc.Invoke(ctx, IpamService_GetPrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) CreatePrefix(ctx context.Context, in *CreatePrefixRequest, opts ...grpc.CallOption) (*Prefix, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prefix)
	err := c.cc.Invoke(ctx, IpamService_CreatePrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) UpdatePrefix(ctx context.Context, in *Prefix, opts ...grpc.CallOption) (*Prefix, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prefix)
	err := c.cc.Invoke(ctx, IpamService_UpdatePrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) DeletePrefix(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, IpamService_DeletePrefix_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) ListIPAddresses(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListIPAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIPAddressesResponse)
	err := c.cc.Invoke(ctx, IpamService_ListIPAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) GetIPAddress(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*IPAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAddress)
	err := c.cc.Invoke(ctx, IpamService_GetIPAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) CreateIPAddress(ctx context.Context, in *CreateIPAddressRequest, opts ...grpc.CallOption) (*IPAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAddress)
	err := c.cc.Invoke(ctx, IpamService_CreateIPAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) UpdateIPAddress(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*IPAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAddress)
	err := c.cc.Invoke(ctx, IpamService_UpdateIPAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) DeleteIPAddress(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, IpamService_DeleteIPAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) ListVLANs(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListVLANsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVLANsResponse)
	err := c.cc.Invoke(ctx, IpamService_ListVLANs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) GetVLAN(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*VLAN, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VLAN)
	err := c.cc.Invoke(ctx, IpamService_GetVLAN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) CreateVLAN(ctx context.Context, in *CreateVLANRequest, opts ...grpc.CallOption) (*VLAN, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VLAN)
	err := c.cc.Invoke(ctx, IpamService_CreateVLAN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) UpdateVLAN(ctx context.Context, in *VLAN, opts ...grpc.CallOption) (*VLAN, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VLAN)
	err := c.cc.Invoke(ctx, IpamService_UpdateVLAN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamServiceClient) DeleteVLAN(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, IpamService_DeleteVLAN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpamServiceServer is the server API for IpamService service.
// All implementations must embed UnimplementedIpamServiceServer
// for forward compatibility.
type IpamServiceServer interface {
	ListPrefixes(context.Context, *ListRequest) (*ListPrefixesResponse, error)
	GetPrefix(context.Context, *GetRequest) (*Prefix, error)
	CreatePrefix(context.Context, *CreatePrefixRequest) (*Prefix, error)
	UpdatePrefix(context.Context, *Prefix) (*Prefix, error)
	DeletePrefix(context.Context, *GetRequest) (*DeleteResponse, error)
	ListIPAddresses(context.Context, *ListRequest) (*ListIPAddressesResponse, error)
	GetIPAddress(context.Context, *GetRequest) (*IPAddress, error)
	CreateIPAddress(context.Context, *CreateIPAddressRequest) (*IPAddress, error)
	UpdateIPAddress(context.Context, *IPAddress) (*IPAddress, error)
	DeleteIPAddress(context.Context, *GetRequest) (*DeleteResponse, error)
	ListVLANs(context.Context, *ListRequest) (*ListVLANsResponse, error)
	GetVLAN(context.Context, *GetRequest) (*VLAN, error)
	CreateVLAN(context.Context, *CreateVLANRequest) (*VLAN, error)
	UpdateVLAN(context.Context, *VLAN) (*VLAN, error)
	DeleteVLAN(context.Context, *GetRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedIpamServiceServer()
}

// UnimplementedIpamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIpamServiceServer struct{}

func (UnimplementedIpamServiceServer) ListPrefixes(context.Context, *ListRequest) (*ListPrefixesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrefixes not implemented")
}
func (UnimplementedIpamServiceServer) GetPrefix(context.Context, *GetRequest) (*Prefix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrefix not implemented")
}
func (UnimplementedIpamServiceServer) CreatePrefix(context.Context, *CreatePrefixRequest) (*Prefix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrefix not implemented")
}
func (UnimplementedIpamServiceServer) UpdatePrefix(context.Context, *Prefix) (*Prefix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrefix not implemented")
}
func (UnimplementedIpamServiceServer) DeletePrefix(context.Context, *GetRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrefix not implemented")
}
func (UnimplementedIpamServiceServer) ListIPAddresses(context.Context, *ListRequest) (*ListIPAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIPAddresses not implemented")
}
func (UnimplementedIpamServiceServer) GetIPAddress(context.Context, *GetRequest) (*IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPAddress not implemented")
}
func (UnimplementedIpamServiceServer) CreateIPAddress(context.Context, *CreateIPAddressRequest) (*IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIPAddress not implemented")
}
func (UnimplementedIpamServiceServer) UpdateIPAddress(context.Context, *IPAddress) (*IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIPAddress not implemented")
}
func (UnimplementedIpamServiceServer) DeleteIPAddress(context.Context, *GetRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIPAddress not implemented")
}
func (UnimplementedIpamServiceServer) ListVLANs(context.Context, *ListRequest) (*ListVLANsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVLANs not implemented")
}
func (UnimplementedIpamServiceServer) GetVLAN(context.Context, *GetRequest) (*VLAN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVLAN not implemented")
}
func (UnimplementedIpamServiceServer) CreateVLAN(context.Context, *CreateVLANRequest) (*VLAN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVLAN not implemented")
}
func (UnimplementedIpamServiceServer) UpdateVLAN(context.Context, *VLAN) (*VLAN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVLAN not implemented")
}
func (UnimplementedIpamServiceServer) DeleteVLAN(context.Context, *GetRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVLAN not implemented")
}
func (UnimplementedIpamServiceServer) mustEmbedUnimplementedIpamServiceServer() {}
func (UnimplementedIpamServiceServer) testEmbeddedByValue()                     {}

// UnsafeIpamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpamServiceServer will
// result in compilation errors.
type UnsafeIpamServiceServer interface {
	mustEmbedUnimplementedIpamServiceServer()
}

func RegisterIpamServiceServer(s grpc.ServiceRegistrar, srv IpamServiceServer) {
	// If the following call pancis, it indicates UnimplementedIpamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IpamService_ServiceDesc, srv)
}

func _IpamService_ListPrefixes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).ListPrefixes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_ListPrefixes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).ListPrefixes(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_GetPrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).GetPrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_GetPrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).GetPrefix(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_CreatePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).CreatePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_CreatePrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).CreatePrefix(ctx, req.(*CreatePrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_UpdatePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prefix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).UpdatePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_UpdatePrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).UpdatePrefix(ctx, req.(*Prefix))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_DeletePrefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).DeletePrefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_DeletePrefix_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).DeletePrefix(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_ListIPAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).ListIPAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_ListIPAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).ListIPAddresses(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_GetIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).GetIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_GetIPAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).GetIPAddress(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_CreateIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIPAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).CreateIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_CreateIPAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).CreateIPAddress(ctx, req.(*CreateIPAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_UpdateIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).UpdateIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_UpdateIPAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).UpdateIPAddress(ctx, req.(*IPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_DeleteIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).DeleteIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_DeleteIPAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).DeleteIPAddress(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_ListVLANs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).ListVLANs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_ListVLANs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).ListVLANs(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_GetVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).GetVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_GetVLAN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).GetVLAN(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_CreateVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVLANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).CreateVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_CreateVLAN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).CreateVLAN(ctx, req.(*CreateVLANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_UpdateVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VLAN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).UpdateVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_UpdateVLAN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).UpdateVLAN(ctx, req.(*VLAN))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamService_DeleteVLAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamServiceServer).DeleteVLAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpamService_DeleteVLAN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamServiceServer).DeleteVLAN(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpamService_ServiceDesc is the grpc.ServiceDesc for IpamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipam_proto.IpamService",
	HandlerType: (*IpamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPrefixes",
			Handler:    _IpamService_ListPrefixes_Handler,
		},
		{
			MethodName: "GetPrefix",
			Handler:    _IpamService_GetPrefix_Handler,
		},
		{
			MethodName: "CreatePrefix",
			Handler:    _IpamService_CreatePrefix_Handler,
		},
		{
			MethodName: "UpdatePrefix",
			Handler:    _IpamService_UpdatePrefix_Handler,
		},
		{
			MethodName: "DeletePrefix",
			Handler:    _IpamService_DeletePrefix_Handler,
		},
		{
			MethodName: "ListIPAddresses",
			Handler:    _IpamService_ListIPAddresses_Handler,
		},
		{
			MethodName: "GetIPAddress",
			Handler:    _IpamService_GetIPAddress_Handler,
		},
		{
			MethodName: "CreateIPAddress",
			Handler:    _IpamService_CreateIPAddress_Handler,
		},
		{
			MethodName: "UpdateIPAddress",
			Handler:    _IpamService_UpdateIPAddress_Handler,
		},
		{
			MethodName: "DeleteIPAddress",
			Handler:    _IpamService_DeleteIPAddress_Handler,
		},
		{
			MethodName: "ListVLANs",
			Handler:    _IpamService_ListVLANs_Handler,
		},
		{
			MethodName: "GetVLAN",
			Handler:    _IpamService_GetVLAN_Handler,
		},
		{
			MethodName: "CreateVLAN",
			Handler:    _IpamService_CreateVLAN_Handler,
		},
		{
			MethodName: "UpdateVLAN",
			Handler:    _IpamService_UpdateVLAN_Handler,
		},
		{
			MethodName: "DeleteVLAN",
			Handler:    _IpamService_DeleteVLAN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ipam/ipam.proto",
}
