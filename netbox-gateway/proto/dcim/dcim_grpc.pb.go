// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/dcim/dcim.proto

package dcim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DcimService_ListRacks_FullMethodName    = "/dcim_proto.DcimService/ListRacks"
	DcimService_GetRack_FullMethodName      = "/dcim_proto.DcimService/GetRack"
	DcimService_CreateRack_FullMethodName   = "/dcim_proto.DcimService/CreateRack"
	DcimService_UpdateRack_FullMethodName   = "/dcim_proto.DcimService/UpdateRack"
	DcimService_DeleteRack_FullMethodName   = "/dcim_proto.DcimService/DeleteRack"
	DcimService_ListDevices_FullMethodName  = "/dcim_proto.DcimService/ListDevices"
	DcimService_GetDevice_FullMethodName    = "/dcim_proto.DcimService/GetDevice"
	DcimService_CreateDevice_FullMethodName = "/dcim_proto.DcimService/CreateDevice"
	DcimService_UpdateDevice_FullMethodName = "/dcim_proto.DcimService/UpdateDevice"
	DcimService_DeleteDevice_FullMethodName = "/dcim_proto.DcimService/DeleteDevice"
)

// DcimServiceClient is the client API for DcimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DcimServiceClient interface {
	ListRacks(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListRacksResponse, error)
	GetRack(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Rack, error)
	CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*Rack, error)
	UpdateRack(ctx context.Context, in *Rack, opts ...grpc.CallOption) (*Rack, error)
	DeleteRack(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListDevices(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	GetDevice(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Device, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error)
	UpdateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error)
	DeleteDevice(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type dcimServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDcimServiceClient(cc grpc.ClientConnInterface) DcimServiceClient {
	return &dcimServiceClient{cc}
}

func (c *dcimServiceClient) ListRacks(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRacksResponse)
	err := c.cc.Invoke(ctx, DcimService_ListRacks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) GetRack(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Rack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rack)
	err := c.cc.Invoke(ctx, DcimService_GetRack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*Rack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rack)
	err := c.cc.Invoke(ctx, DcimService_CreateRack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) UpdateRack(ctx context.Context, in *Rack, opts ...grpc.CallOption) (*Rack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rack)
	err := c.cc.Invoke(ctx, DcimService_UpdateRack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) DeleteRack(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, DcimService_DeleteRack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) ListDevices(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, DcimService_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) GetDevice(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, DcimService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, DcimService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) UpdateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Device)
	err := c.cc.Invoke(ctx, DcimService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dcimServiceClient) DeleteDevice(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, DcimService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DcimServiceServer is the server API for DcimService service.
// All implementations must embed UnimplementedDcimServiceServer
// for forward compatibility.
type DcimServiceServer interface {
	ListRacks(context.Context, *ListRequest) (*ListRacksResponse, error)
	GetRack(context.Context, *GetRequest) (*Rack, error)
	CreateRack(context.Context, *CreateRackRequest) (*Rack, error)
	UpdateRack(context.Context, *Rack) (*Rack, error)
	DeleteRack(context.Context, *GetRequest) (*DeleteResponse, error)
	ListDevices(context.Context, *ListRequest) (*ListDevicesResponse, error)
	GetDevice(context.Context, *GetRequest) (*Device, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error)
	UpdateDevice(context.Context, *Device) (*Device, error)
	DeleteDevice(context.Context, *GetRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedDcimServiceServer()
}

// UnimplementedDcimServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDcimServiceServer struct{}

func (UnimplementedDcimServiceServer) ListRacks(context.Context, *ListRequest) (*ListRacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRacks not implemented")
}
func (UnimplementedDcimServiceServer) GetRack(context.Context, *GetRequest) (*Rack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRack not implemented")
}
func (UnimplementedDcimServiceServer) CreateRack(context.Context, *CreateRackRequest) (*Rack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRack not implemented")
}
func (UnimplementedDcimServiceServer) UpdateRack(context.Context, *Rack) (*Rack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRack not implemented")
}
func (UnimplementedDcimServiceServer) DeleteRack(context.Context, *GetRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRack not implemented")
}
func (UnimplementedDcimServiceServer) ListDevices(context.Context, *ListRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDcimServiceServer) GetDevice(context.Context, *GetRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDcimServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDcimServiceServer) UpdateDevice(context.Context, *Device) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDcimServiceServer) DeleteDevice(context.Context, *GetRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDcimServiceServer) mustEmbedUnimplementedDcimServiceServer() {}
func (UnimplementedDcimServiceServer) testEmbeddedByValue()                     {}

// UnsafeDcimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DcimServiceServer will
// result in compilation errors.
type UnsafeDcimServiceServer interface {
	mustEmbedUnimplementedDcimServiceServer()
}

func RegisterDcimServiceServer(s grpc.ServiceRegistrar, srv DcimServiceServer) {
	// If the following call pancis, it indicates UnimplementedDcimServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DcimService_ServiceDesc, srv)
}

func _DcimService_ListRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).ListRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_ListRacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).ListRacks(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_GetRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).GetRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_GetRack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).GetRack(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_CreateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).CreateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_CreateRack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).CreateRack(ctx, req.(*CreateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_UpdateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).UpdateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_UpdateRack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).UpdateRack(ctx, req.(*Rack))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_DeleteRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).DeleteRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_DeleteRack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).DeleteRack(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).ListDevices(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).GetDevice(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).UpdateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DcimService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DcimServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DcimService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DcimServiceServer).DeleteDevice(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DcimService_ServiceDesc is the grpc.ServiceDesc for DcimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DcimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dcim_proto.DcimService",
	HandlerType: (*DcimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRacks",
			Handler:    _DcimService_ListRacks_Handler,
		},
		{
			MethodName: "GetRack",
			Handler:    _DcimService_GetRack_Handler,
		},
		{
			MethodName: "CreateRack",
			Handler:    _DcimService_CreateRack_Handler,
		},
		{
			MethodName: "UpdateRack",
			Handler:    _DcimService_UpdateRack_Handler,
		},
		{
			MethodName: "DeleteRack",
			Handler:    _DcimService_DeleteRack_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DcimService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DcimService_GetDevice_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DcimService_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DcimService_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DcimService_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dcim/dcim.proto",
}
